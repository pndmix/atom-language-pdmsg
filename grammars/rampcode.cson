'name': 'Rampcode'
'scopeName': 'source.rampcode'
'fileTypes': [
  'ramp',
  'rampcode'
]
'patterns': [
  {
    'match': '(^\\s*|;\\s*)(hz|c)\\s*(?=(@|:))'
    'captures':
      '2':
        'name': 'keyword.control.rampcode'
  }
  {
    'begin': '\\b(def)\\b'
    'beginCaptures':
      '1':
        'name': 'storage.type.rampcode'
    'end': '(?=(=|$))'
    'endCaptures':
      '0':
        'name': 'keyword.operator.rampcode'
    'patterns': [
      {
        'begin': '\\b([a-zA-Z_][a-zA-Z_0-9]*)(\\()'
        'beginCaptures':
          '1':
            'name': 'entity.name.function.rampcode'
          '2':
            'name': 'punctuation.definition.parameter.bracket.round.begin.rampcode'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.parameter.bracket.round.end.rampcode'
        'patterns': [
          {
            'match': '[a-zA-Z_][a-zA-Z_0-9]*'
            'name': 'variable.parameter.function.rampcode'
          }
          {
            'match': ','
            'name': 'meta.delimiter.rampcode'
          }
        ]
      }
      {
        'match': '[a-zA-Z_][a-zA-Z_0-9]*'
        'name': 'entity.name.variable.rampcode'
      }
    ]
  }
  {
    'begin': '\\b(if|int|rint|float|min|max|abs|pow|sqrt|exp|ln|log|log10|fact|cbrt|expm1|log1p|ldexp|sin|cos|tan|asin|acos|atan|atan2|sinh|cosh|tanh|asinh|acosh|atanh|floor|ceil|fmod)(\\()'
    'beginCaptures':
      '1':
        'name': 'entity.name.function.rampcode'
      '2':
        'name': 'punctuation.definition.argument.bracket.round.begin.rampcode'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.argument.bracket.round.end.rampcode'
    'patterns': [
      {
        'include': '$self'
      }
      {
        'match': ','
        'name': 'meta.delimiter.rampcode'
      }
    ]
  }
  {
    'begin': '\\b([a-zA-Z_][a-zA-Z_0-9]*)(\\()'
    'beginCaptures':
      '1':
        'name': 'entity.name.function.macro.rampcode'
      '2':
        'name': 'punctuation.definition.argument.bracket.round.begin.rampcode'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.argument.bracket.round.end.rampcode'
    'patterns': [
      {
        'include': '$self'
      }
      {
        'match': ','
        'name': 'meta.delimiter.rampcode'
      }
    ]
  }
  {
    'include': '#variable'
  }
  {
    'include': '#number'
  }
  {
    'include': '#comments'
  }
  {
    'include': '#punctuation'
  }
  {
    'include': '#keyword'
  }
]
'repository':
  'variable':
    'patterns': [
      {
        'match': '(\\$v1)\\b'
        'name': 'constant.language.rampcode'
      }
      {
        'match': '\\b(c)\\b'
        'name': 'constant.language.rampcode'
      }
      {
        'match': '\\b([a-zA-Z_][a-zA-Z_0-9]*)\\b'
        'name': 'entity.name.variable.macro.rampcode'
      }
    ]
  'number':
    'patterns': [
      {
        'match': '\\b([0-9]+|[1-9][0-9]*\\.[0-9]*|0?\\.[0-9]+)[eE][\\-\\+]?[0-9]+\\b'
        'name': 'constant.numeric.rampcode'
      }
      {
        'match': '\\b([0-9]+\\.[0-9]+)|([0-9]+\\.)|(\\.[0-9]+)|\\b([0-9]+)\\b'
        'name': 'constant.numeric.rampcode'
      }
    ]
  'comments':
    'patterns': [
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.rampcode'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.rampcode'
        'name': 'comment.block.rampcode'
      }
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.rampcode'
        'end': '$'
        'name': 'comment.line.double-slash.rampcode'
      }
    ]
  'punctuation':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.expression.bracket.round.begin.rampcode'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.expression.bracket.round.end.rampcode'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'keyword':
    'patterns': [
      {
        'match': '(@|:|=|~|\\*|/|%|\\+|-|<<|>>|<|<=|>|>=|==|!=|&|\\^|\\||&&|\\|\\|)'
        'name': 'keyword.operator.rampcode'
      }
    ]