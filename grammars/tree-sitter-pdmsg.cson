name: 'Rampcode'
scopeName: 'source.rampcode'
type: 'tree-sitter'
parser: 'tree-sitter-rampcode'

fileTypes: [
  'ramp',
  'rampcode'
]

folds: [
  {
    start: {type: '{', index: 0},
    end: {type: '}', index: -1}
  },
  {
    start: {type: '(', index: 0},
    end: {type: ')', index: -1}
  }
]

comments:
  start: '//'

scopes:
  'program': 'source.rampcode'

  'comment': 'comment.line.rampcode'

  '''
    port,
    host,
    protocol,
    keyword_identifier,
  ''': 'keyword.control.statement.rampcode'

  'special_parameter': 'support.other.rampcode'

  'statement_block > "{"': 'punctuation.definition.block.bracket.curly.begin.rampcode'
  'statement_block > "}"': 'punctuation.definition.block.bracket.curly.end.rampcode'
  'parenthesized > "("': 'punctuation.definition.expression.bracket.round.begin.rampcode'
  'parenthesized > ")"': 'punctuation.definition.expression.bracket.round.end.rampcode'
  'arguments > "("': 'punctuation.definition.argument.bracket.round.begin.rampcode'
  'arguments > ")"': 'punctuation.definition.argument.bracket.round.end.rampcode'

  'number': 'constant.numeric.rampcode'
  'variable': 'constant.language.rampcode'
  'function > name': 'entity.name.function.rampcode'

  '''
    "=",
    "~",
    "*",
    "/",
    "%",
    "+",
    "-",
    "<<",
    ">>",
    "<",
    "<=",
    ">",
    ">=",
    "==",
    "!=",
    "&",
    "^",
    "|",
    "&&",
    "||",
  ''': 'keyword.operator.rampcode'